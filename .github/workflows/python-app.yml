# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python app

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        pip install setuptools --upgrade
        pip install --upgrade pip
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        python -m pip install pathlib
        python -m pip install opencv-python
        python -m pip install numpy
        python -m pip install matplotlib
        python -m pip install paddleocr
        python -m pip install paddlepaddle
        mkdir ~/.config/matplotlib/
        echo "backend: Agg" > ~/.config/matplotlib/matplotlibrc
    - name: Run entry point
      run: |
        pip install .
        PlotScan figures/trimmed.png
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Generate Report
      run: |
        pip install codecov
        pip install pytest-cov
        pytest --cov=./ --cov-report=xml
        codecov
    - name: See coverage
      run: |
          ls
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3.1.4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        env_vars: OS,PYTHON
        files: ./coverage.xml
        flags: tests
    - name: "Pushing reports to Codacy"
      run: |
            export CODACY_PROJECT_TOKEN=${{secrets.CODACY_TOKEN}}
            bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
